﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis2.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject SweetAlertService Swal

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">
           Update Clearance
        </MudText>
    </TitleContent>
    <DialogContent>
         <MudContainer>
            <p1>*Enter Purpose</p1>
            <MudTextField @bind-Value="@xclearance.purpose"
                          T="string" Lines="3"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense">
            </MudTextField>
             </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   @onclick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [Parameter] public clearance xclearance { get; set; } = new clearance();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    string resIDString;
    private async Task ResID()
    {
        resIDString = await localStorage.GetItemAsStringAsync("resID");
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    async Task Submit()
    {
        await ResID();
        int i = 0;
        try
        {
            var _clearance = new clearance
                {
                    clearID = xclearance.clearID,
                    type = xclearance.type,
                    date = xclearance.date,
                    resID = resIDString,
                    purpose = xclearance.purpose
                };
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"https://localhost:7242/");
                var json = JsonConvert.SerializeObject(_clearance);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PutAsync($"api/Clearance/UpdateClearance", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        await InvokeAsync(async () =>
                        {
                            MudDialog.Cancel();
                            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Successfully Updated",
                                    Icon = SweetAlertIcon.Success,
                                });
                           
                            await InvokeAsync(StateHasChanged);
                        });
                    }
                }
                else
                {
                    await InvokeAsync(async() =>
                    {
                        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Error!",
                                Icon = SweetAlertIcon.Error,
                            });
                        
                        StateHasChanged();
                    });
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
}
