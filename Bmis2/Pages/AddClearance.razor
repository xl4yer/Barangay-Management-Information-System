﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis2.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject SweetAlertService Swal

<EditForm Model="@xclearance" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog TitleClass="mud-primary" DisableSidePadding="true">
        <TitleContent>
            <MudText Typo="Typo.h6" Style="color:white">
               Request Brgy. Clearance
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudContainer>
                <p1>Enter Purpose</p1>
                <MudTextField @bind-Value="@xclearance.purpose"
                              For="@(() => xclearance.purpose)"
                              T="string" Lines="3"
                              Variant="Variant.Outlined"
                              Margin="Margin.Dense">
                </MudTextField>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Tertiary"
                       @onclick="Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>


@code {

    [Parameter] public clearance xclearance { get; set; } = new clearance();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }
    string resIDString = "";

    private void OnValidSubmit(EditContext context)
    {

    }

    private async Task ResID()
    {
        resIDString = await localStorage.GetItemAsStringAsync("resID");
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    async Task Submit()
    {
        if (string.IsNullOrEmpty(xclearance.purpose))
        {
            MudDialog.Cancel();
            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error! Fill The Required field.",
                    Icon = SweetAlertIcon.Warning,
                });
        }
        else
        {
            await ResID();
            int i = 0;
            try
            {
                var _clearance = new clearance
                    {
                        clearID = Guid.NewGuid().ToString(),
                        resID = resIDString,
                        type = xclearance.type,
                        date = DateTime.Now,
                        purpose = xclearance.purpose,
                        rstatus = xclearance.rstatus
                    };
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"https://localhost:7242/");
                    var json = JsonConvert.SerializeObject(_clearance);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                    HttpResponseMessage response = await client.PostAsync($"api/clearance/addclearance", content);
                    if (response.IsSuccessStatusCode)
                    {
                        string contentresponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentresponse);
                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                MudDialog.Cancel();
                                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                                    {
                                        Title = "Successfully Submitted",
                                        Icon = SweetAlertIcon.Success,
                                    });

                                await InvokeAsync(StateHasChanged);
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(() =>
                        {
                            snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                            StateHasChanged();
                        });
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }

    }
}
