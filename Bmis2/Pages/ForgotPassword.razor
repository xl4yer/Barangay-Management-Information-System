@page "/forgot-password"
@layout LoginLayout
@inject ISnackbar Snackbar
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject NavigationManager Nav
@using Bmis2.Models
@using System.Text
@inject SweetAlertService Swal

<PageTitle>Forgot Password</PageTitle>

@message

<MudIconButton Class="back" Icon="@Icons.Material.Filled.ArrowBack" Href="/" aria-label="delete"></MudIconButton>

<MudToolBar><h3>Forgot Your Password?</h3></MudToolBar>
<MudCard>
    <MudCardContent>
        <MudText Align="Align.Center">
            Enter Your Email
        </MudText>
        <MudTextField Style="text-align:center" @bind-Value="@xres.email"
                      Lines="1"
                      Variant="Variant.Outlined"
                      Margin="Margin.Dense">
        </MudTextField>

        <br />
        <MudButton Disabled="@_processing" FullWidth @onclick="CheckEmail" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Submitting</MudText>
            }
            else
            {
                <MudText>Submit</MudText>
            }
        </MudButton>
    </MudCardContent>
</MudCard>


@code {
    [Parameter] public residents xres { get; set; } = new residents();
    private string message { get; set; } = "";
    public string randomNumbers = "";
    private bool _processing = false;

    private async Task GenerateRandomNumbers()
    {
        Random random = new Random();
        int randomNumber = random.Next(1000, 10000);

        randomNumbers = $"{randomNumber}";
    }

    List<residents>? xresident;
    async Task CheckEmail()
    {
        _processing = true;
        if (string.IsNullOrEmpty(xres.email))
        {
            _processing = false;
            SweetAlertResult results = await Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Enter Valid Email",
                    Icon = SweetAlertIcon.Warning,
                });
        }
        else
        {
            xresident = new List<residents>();
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"https://localhost:7242/");
                HttpResponseMessage json = await client.GetAsync($"api/resident/CheckEmail?email={xres.email}");
                if (json.IsSuccessStatusCode)
                {
                    string jsonContent = await json.Content.ReadAsStringAsync();
                    List<residents> code = JsonConvert.DeserializeObject<List<residents>>(jsonContent);

                    if (code.Count > 0)
                    {
                        xresident.Add(new residents()
                            {
                                resID = code[0].resID,
                                fname = code[0].fname,
                                lname = code[0].lname,
                                purok = code[0].purok,
                                gender = code[0].gender,
                                status = code[0].status,
                                contact = code[0].contact,
                            });

                        await localStorage.SetItemAsStringAsync("resID", code[0].resID);
                        await localStorage.SetItemAsStringAsync("fname", code[0].fname);
                        await localStorage.SetItemAsStringAsync("lname", code[0].lname);
                        await localStorage.SetItemAsStringAsync("purok", code[0].purok);
                        await localStorage.SetItemAsStringAsync("gender", code[0].gender);
                        await localStorage.SetItemAsStringAsync("status", code[0].status);
                        await localStorage.SetItemAsStringAsync("contact", code[0].contact);
                        await Submit();
                        _processing = false;

                    }
                    else
                    {
                        _processing = false;
                        SweetAlertResult results = await Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Enter Valid Email",
                                Icon = SweetAlertIcon.Warning,
                            });
                    }
                }
            }
        }

    }

    private async Task SendEmail()
    {
        await GenerateRandomNumbers();
        try
        {
            var httpClient = new HttpClient();
            var content = new FormUrlEncodedContent(new[]
            {
            new KeyValuePair<string, string>("toAddress", $"{xres.email}"),
            new KeyValuePair<string, string>("subject", "Password Reset Code"),
            new KeyValuePair<string, string>("body", $"{randomNumbers}")
        });

            var response = await httpClient.PostAsync($"https://localhost:7242/SendEmail", content);

            if (response.IsSuccessStatusCode)
            {
                message = "Message Sent";
            }
            else
            {
                message = "Failed to send message";
            }
        }
        catch (Exception ex)
        {
            message = $"{ex.Message}";
        }
    }

    public async Task Submit()
    {
        await SendEmail();
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Verification Code Sent",
                Text = $"Verification Code Sent to your email {xres.email}",
                Icon = SweetAlertIcon.Success,
            });
        await localStorage.SetItemAsStringAsync("random", randomNumbers);
        Nav.NavigateTo("update-password");
    }
}

<style>
    body {
        padding: 0;
        margin: 0;
        width: 100%;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: sans-serif;
        font-size: 12px;
        font-family: 'Poppins', sans-serif;
        background-image: url('logo2.png');
        background-position: center;
        background-repeat: no-repeat;
        position: relative;
    }

    .back {
        position: fixed;
        top: 10px; /* Adjust the value as needed */
        left: 10px; /* Adjust the value as needed */
    }

</style>
