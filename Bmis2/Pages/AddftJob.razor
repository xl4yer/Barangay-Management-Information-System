﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis2.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@inject SweetAlertService Swal

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">
          Request First Time Job
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <p1 style="font-size:17px;">Click <p1><b>SUBMIT</b></p1> to request a certificate</p1>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Tertiary"
                   @onclick="Submit">Submit</MudButton>
    </DialogActions>
</MudDialog>


@code {

    [Parameter] public ftjob xjob { get; set; } = new ftjob();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    string resIDString;
    private async Task ResID()
    {
        resIDString = await localStorage.GetItemAsStringAsync("resID");
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    async Task Submit()
    {
        await ResID();
        int i = 0;
        try
        {
            var _xjob = new ftjob
                {
                    ftjobID = Guid.NewGuid().ToString(),
                    resID = resIDString,
                    type = xjob.type,
                    date = DateTime.Now,
                    rstatus = xjob.rstatus
                };
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"https://localhost:7242/");
                var json = JsonConvert.SerializeObject(_xjob);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PostAsync($"api/FtJob/AddftJob", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        await InvokeAsync(async () =>
                        {
                            MudDialog.Cancel();
                            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Successfully Submitted",
                                    Icon = SweetAlertIcon.Success,
                                });

                            await InvokeAsync(StateHasChanged);
                        });
                    }
                }
                else
                {
                    await InvokeAsync(() =>
                    {
                        snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                        StateHasChanged();
                    });
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
}
