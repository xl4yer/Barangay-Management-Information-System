@page "/update-password"
@layout LoginLayout
@inject ISnackbar Snackbar
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject NavigationManager Nav
@using Bmis2.Models
@using System.Text
@inject SweetAlertService Swal
@using System.ComponentModel.DataAnnotations;

<PageTitle>Confirmation</PageTitle>
<MudIconButton Class="back" Icon="@Icons.Material.Filled.ArrowBack" Href="/forgot-password" aria-label="delete"></MudIconButton>
<EditForm Model="@xres" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardContent>
            <p1>Activation Code</p1>
            <MudTextField @bind-Value="@ActivationCode"
                          For="@(() => ActivationCode)"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense">
            </MudTextField>
            <br />
            <p1>*Password</p1>
            <MudTextField @bind-Value="@xres.password"
                          For="@(() => xres.password)"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="Click"
                          AdornmentAriaLabel="Show Password" />
            <br />
            <p1>*Confirm Password</p1>
            <MudTextField @bind-Value="@xres.password2"
                          For="@(() => xres.password2)"
                          Margin="Margin.Dense"
                          Variant="Variant.Outlined"
                          InputType="@PasswordInput"
                          Adornment="Adornment.End"
                          AdornmentIcon="@PasswordInputIcon"
                          OnAdornmentClick="Click"
                          AdornmentAriaLabel="Show Password" />
            <br />
            <MudButton Variant="Variant.Filled"
                       Color="Color.Tertiary"
                       FullWidth="true"
                       @onclick="Submit">Submit</MudButton>
        </MudCardContent>
    </MudCard>
</EditForm>

@code {
    [Required]
    public string ActivationCode { get; set; } = "";
    [Parameter] public residents xres { get; set; } = new residents();
    private string message { get; set; } = "";
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    private bool _processing = false;
    bool isShow;
    string _resID = "";
    string _fname = "";
    string _lname = "";
    string _purok = "";
    string _gender = "";
    string _status = "";
    string _contact = "";
    string _random = "";

    void Click()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private void OnValidSubmit(EditContext context)
    {

    }

    protected override async Task OnParametersSetAsync()
    {
        _resID = await localStorage.GetItemAsStringAsync("resID");
        _fname = await localStorage.GetItemAsStringAsync("fname");
        _lname = await localStorage.GetItemAsStringAsync("lname");
        _purok = await localStorage.GetItemAsStringAsync("purok");
        _gender = await localStorage.GetItemAsStringAsync("gender");
        _status = await localStorage.GetItemAsStringAsync("status");
        _contact = await localStorage.GetItemAsStringAsync("contact");
        _random = await localStorage.GetItemAsStringAsync("random");
    }


    public async Task Submit()
    {
        try
        {
            if (ActivationCode != _random)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Invalid Activation Code",
                        Icon = SweetAlertIcon.Error
                    });
            }
            else if (xres.password != xres.password2)
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Password Does Not Match!",
                        Icon = SweetAlertIcon.Error
                    });
            }
            else if (string.IsNullOrEmpty(xres.password))
            {
                await Swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Fill the required fields!",
                        Icon = SweetAlertIcon.Error
                    });
            }
            else
            {
                int i = 0;
                var _res = new residents
                    {
                        resID = _resID,
                        fname = _fname,
                        lname = _lname,
                        purok = _purok,
                        gender = _gender,
                        status = _status,
                        contact = _contact,
                        password = xres.password
                    };
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"https://localhost:7242/");
                    var json = JsonConvert.SerializeObject(_res);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                    HttpResponseMessage response = await client.PutAsync($"/api/Resident/ForgotPassword", content);
                    if (response.IsSuccessStatusCode)
                    {
                        string contentresponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentresponse);
                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                                    {
                                        Title = "Password Successfully Changed!",
                                        Icon = SweetAlertIcon.Success,
                                    });
                                await InvokeAsync(StateHasChanged);
                                await localStorage.RemoveItemAsync("resID");
                                await localStorage.RemoveItemAsync("random");
                                await localStorage.RemoveItemAsync("email");
                                Nav.NavigateTo("/");
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(async () =>
                        {
                            SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Error",
                                    Icon = SweetAlertIcon.Error,
                                });
                            StateHasChanged();
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {


        }


    }
}


<style>
    body {
        padding: 0;
        margin: 0;
        width: 100%;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        font-family: sans-serif;
        font-size: 12px;
        font-family: 'Poppins', sans-serif;
        background-image: url('logo2.png');
        background-position: center;
        background-repeat: no-repeat;
        position: relative;
    }

    .back {
        position: fixed;
        top: 10px; /* Adjust the value as needed */
        left: 10px; /* Adjust the value as needed */
    }
</style>
