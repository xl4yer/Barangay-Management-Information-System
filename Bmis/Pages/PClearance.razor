﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">
           Print Clearance
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer>
            <p1 style="font-size:18px">Click <p1 style="font-weight:bold;">"Confirm""</p1> to Print Clearance</p1>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="Submit">Print</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool hide = false;
    DateTime? dateNow = DateTime.Today;
    private string text { get; set; } = "";
    [Parameter] public residents xresident { get; set; } = new residents();
    [Parameter] public clearance xclearance { get; set; } = new clearance();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<residents>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xinfo = await httpClient.GetFromJsonAsync<List<residents>>($"api/resident/searchresident?search={value}");
        return xinfo;
    }

    [Inject]
    protected IJSRuntime JSRuntime { get; set; }
    private async Task OpenInNewTab(string url)
    {
        await JSRuntime.InvokeVoidAsync("window.open", url, "_blank", "noopener,noreferrer");
    }

    private async Task Submit()
    {
        int i = 0;
        try
        {
            var _clearance = new clearance
                {
                    clearID = xclearance.clearID,
                    type = xclearance.type,
                    date = xclearance.date,
                    resID = xresident.resID,
                    purpose = xclearance.purpose,
                    rstatus = "Claimed"
                };
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var json = JsonConvert.SerializeObject(_clearance);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PutAsync($"api/Clearance/UpdateClearance", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        string path = $"printclearance/{xclearance.clearID}";
                        await OpenInNewTab(path);
                        MudDialog.Close();
                    }
                }
                else
                {
                    StateHasChanged();
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
}