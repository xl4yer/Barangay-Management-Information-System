﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar
@using System.Net.Mail

<EditForm Model="@xhousehold" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudDialog DisableSidePadding="true">
        <DialogContent>
            <MudContainer Style="max-height: 500px; overflow-y: scroll">
                <p1>*Household No.</p1>
                <MudTextField @bind-Value="@xhousehold.houseID" For="@(() => xhousehold.houseID)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>*Household Head Name</p1>
                <MudTextField @bind-Value="@xhousehold.head" For="@(() => xhousehold.head)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                <p1>*Purok</p1>
                <MudTextField @bind-Value="@xhousehold.purok" For="@(() => xhousehold.purok)" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Submit</MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }
    [Parameter] public household xhousehold { get; set; } = new household();
    private static int counter = 1;
    private static string lastId = "";

    public void OnValidSubmit(EditContext context)
    {

    }

    private string id()
    {
        string prefix = "";

        if (string.IsNullOrEmpty(lastId))
        {
            lastId = prefix + counter.ToString().PadLeft(6, '0');
            counter++;
        }

        string id = lastId;
        lastId = prefix + counter.ToString().PadLeft(6, '0');
        counter++;

        return id;
    }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(xhousehold.houseID) &&
            string.IsNullOrEmpty(xhousehold.head) &&
            string.IsNullOrEmpty(xhousehold.purok))
        {
            snackBar.Add($"Fill The Required Fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            try
            {
                var h = new household
                    {
                        houseID = xhousehold.houseID,
                        head = xhousehold.head,
                        purok = xhousehold.purok
                    };
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"{Nav.BaseUri}");
                    var json = JsonConvert.SerializeObject(h);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                    HttpResponseMessage response = await client.PostAsync($"api/household/addhousehold", content);
                    if (response.IsSuccessStatusCode)
                    {
                        string contentresponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentresponse);
                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                snackBar.Add($"Done: Successfully Saved!", Severity.Success);
                                MudDialog.Cancel();
                                await InvokeAsync(StateHasChanged);
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(() =>
                        {
                            snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                            StateHasChanged();
                        });
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
       
    }
}