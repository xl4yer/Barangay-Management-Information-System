﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar

<MudDialog TitleClass="mud-primary" DisableSidePadding="true">
    <TitleContent>
        <MudText Typo="Typo.h6" Style="color:white">
           Update First Time Job Status
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px;">
            <p1>Name</p1>
            <MudTextField Clearable @bind-Value="@xftjob.fullname" Variant="Variant.Outlined" ReadOnly Margin="Margin.Dense"></MudTextField> <br />
            <p1>Status</p1>
            <MudSelect @bind-Value="@xftjob.rstatus" For="@(() => xftjob.rstatus)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                <MudSelectItem Value="@("Submitted")" />
                <MudSelectItem Value="@("Ready to pickup")" />
                <MudSelectItem Value="@("Claimed")" />
            </MudSelect><br />
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" @onclick="Submit">Update</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private bool hide = false;
    DateTime? dateNow = DateTime.Today;
    private string text { get; set; } = "";
    [Parameter] public residents xresident { get; set; } = new residents();
    [Parameter] public ftjob xftjob { get; set; } = new ftjob();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task<IEnumerable<residents>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xinfo = await httpClient.GetFromJsonAsync<List<residents>>($"api/resident/searchresident?search={value}");
        return xinfo;
    }

    private async Task Submit()
    {
        int i = 0;
        try
        {
            var xft = new ftjob
                {
                    ftjobID = xftjob.ftjobID,
                    resID = xresident.resID,
                    type = xftjob.type,
                    date = xftjob.date,
                    rstatus = xftjob.rstatus
                };
            using (HttpClient client = new HttpClient())
            {
                client.BaseAddress = new Uri($"{Nav.BaseUri}");
                var json = JsonConvert.SerializeObject(xft);
                HttpContent content = new StringContent(json);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                await localStorage.GetItemAsStringAsync("token"));
                HttpResponseMessage response = await client.PutAsync($"api/FtJob/UpdateftJob", content);
                if (response.IsSuccessStatusCode)
                {
                    string contentresponse = await response.Content.ReadAsStringAsync();
                    i = JsonConvert.DeserializeObject<int>(contentresponse);
                    if (i > 0)
                    {
                        await InvokeAsync(async () =>
                        {
                            snackBar.Add($"Done: Successfully Updated!", Severity.Success);
                            MudDialog.Cancel();
                            await InvokeAsync(StateHasChanged);
                        });
                    }
                }
                else
                {
                    await InvokeAsync(() =>
                    {
                        snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                        StateHasChanged();
                    });
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
}