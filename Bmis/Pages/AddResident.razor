@using Bmis.Models
@inject ISnackbar Snackbar
@using System.Net.Http.Headers
@inject ILocalStorageService localStorage
@inject NavigationManager Nav
@inject IWebHostEnvironment WebHostEnvironment
@using System.Text
@inject ISnackbar snackBar

<EditForm Model="@xres" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <div class="container">
                <div class="row">
                    <div class="col-sm-6">
                        <p1>*Household No.</p1>
                        <MudTextField Clearable @bind-Value="@xres.houseID"  Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> <br />
                         <p1>*First Name</p1>
                            <MudTextField Clearable @bind-Value="@xres.fname" For="@(() => xres.fname)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField> <br />
                         <p1>*Middle Name</p1>
                         <MudTextField Clearable @bind-Value="@xres.mname" HelperText="Leave blank if Not Applicable" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                         <p1>*Last Name</p1>
                            <MudTextField Clearable @bind-Value="@xres.lname" For="@(() => xres.lname)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                         <p1>*Extension</p1>
                         <MudTextField Clearable @bind-Value="@xres.ext" HelperText="Leave blank if Not Applicable" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    </div>
                    <div class="col-sm-6">
                         <p1>*Purok</p1>
                            <MudTextField Clearable @bind-Value="@xres.purok" For="@(() => xres.purok)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField><br />
                         <p1>*Gender</p1>
                            <MudSelect @bind-Value="@xres.gender" For="@(() => xres.gender)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                             <MudSelectItem Value="@("Male")" />
                             <MudSelectItem Value="@("Female")" />
                         </MudSelect><br />
                         <p1>*Birthdate</p1>
                         <MudDatePicker  Editable="true" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Date="birthdate" Placeholder="Select Date" /><br />
                         <p1>*Marital Status</p1>
                            <MudSelect @bind-Value="@xres.status" For="@(() => xres.status)" Margin="Margin.Dense" T="string" Variant="Variant.Outlined">
                             <MudSelectItem Value="@("Single")" />
                             <MudSelectItem Value="@("Married")" />
                             <MudSelectItem Value="@("Separated")" />
                             <MudSelectItem Value="@("Widowed")" />
                         </MudSelect><br />
                         <p1>*Contact No.</p1>
                            <MudTextField Clearable @bind-Value="@xres.contact" For="@(() => xres.contact)" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                     </div>
                 </div>
             </div>
         </MudContainer>
     </DialogContent>
     <DialogActions>
         <MudButton OnClick="Cancel">Cancel</MudButton>
         <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Submit</MudButton>
     </DialogActions>
 </MudDialog>
 </EditForm>

@code {
    bool hide = false;
    [Parameter] public residents xres { get; set; } = new residents();
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    DateTime? birthdate = DateTime.Today;

    public async Task Cancel()
    {
        MudDialog.Cancel();
    }

    public void OnValidSubmit(EditContext context)
    {
        
    }


    private async Task<IEnumerable<household>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var x = await httpClient.GetFromJsonAsync<List<household>>($"api/household/searchhousehold?search={value}");
        return x;
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(xres.fname) &&
           string.IsNullOrEmpty(xres.lname) &&
           string.IsNullOrEmpty(xres.purok) &&
           string.IsNullOrEmpty(xres.gender) &&
           string.IsNullOrEmpty(xres.status) &&
           string.IsNullOrEmpty(xres.contact))
        {
            snackBar.Add($"Fill The Required Fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            try
            {
                var res = new residents
                    {
                        resID = Guid.NewGuid().ToString(),
                        houseID = xres.houseID,
                        fname = xres.fname,
                        mname = xres.mname,
                        lname = xres.lname,
                        ext = xres.ext,
                        gender = xres.gender,
                        bdate = birthdate.Value,
                        status = xres.status,
                        contact = xres.contact,
                        purok = xres.purok
                    };
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"{Nav.BaseUri}");
                    var json = JsonConvert.SerializeObject(res);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                    HttpResponseMessage response = await client.PostAsync($"api/Resident/AddResident", content);
                    if (response.IsSuccessStatusCode)
                    {
                        string contentresponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentresponse);
                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                Snackbar.Add($"Done: Successfully Saved!", Severity.Success);
                                MudDialog.Cancel();
                                await InvokeAsync(StateHasChanged);
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(() =>
                        {
                            Snackbar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                            StateHasChanged();
                        });
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
       
    }

}

