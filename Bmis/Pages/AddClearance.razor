﻿@using System.Net.Http
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using Bmis.Models;
@using Newtonsoft.Json;
@inject NavigationManager Nav
@inject ILocalStorageService localStorage
@inject IJSRuntime jsRuntime
@inject ISnackbar snackBar

<EditForm Model="@xclearance" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <p1>*Name</p1>
            <MudAutocomplete Clearable T="residents" @bind-Value="xresident" Variant="Variant.Outlined" Margin="Margin.Dense" SearchFunc="@Search" ToStringFunc="@(e => e == null ? null : $"{e.fullname}{e.resID}")" Strict="false"></MudAutocomplete>
             <p1>*Purpose</p1>
                <MudTextField @bind-Value="@xclearance.purpose" For="@(() => xclearance.purpose)" T="string" Lines="3" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
         </MudContainer>
     </DialogContent>
     <DialogActions>
         <MudButton OnClick="Cancel">Cancel</MudButton>
         <MudButton Variant="Variant.Filled" Color="Color.Tertiary" @onclick="Submit">Submit</MudButton>
     </DialogActions>
 </MudDialog>
 </EditForm>

@code {
    private bool hide = false;
    DateTime? dateNow = DateTime.Today;
    private string text { get; set; } = "";
    [Parameter] public residents xresident { get; set; } = new residents();
    [Parameter] public clearance xclearance { get; set; } = new clearance();
    [CascadingParameter] MudDialogInstance? MudDialog { get; set; }

    private async Task Cancel()
    {
        MudDialog.Cancel();
    }

    public void OnValidSubmit(EditContext context)
    {
        
    }

    private async Task<IEnumerable<residents>> Search(string value)
    {
        HttpClient httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri($"{Nav.BaseUri}");
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
        await localStorage.GetItemAsStringAsync("token"));
        var xinfo = await httpClient.GetFromJsonAsync<List<residents>>($"api/resident/searchresident?search={value}");
        return xinfo;
    }

    private async Task Submit()
    {
        if (string.IsNullOrEmpty(xresident.resID) &&
            string.IsNullOrEmpty(xclearance.purpose))
        {
            snackBar.Add($"Fill The Required Fields!", Severity.Warning);
        }
        else
        {
            int i = 0;
            try
            {
                var _clearance = new clearance
                    {
                        clearID = Guid.NewGuid().ToString(),
                        type = xclearance.type,
                        date = dateNow.Value,
                        resID = xresident.resID,
                        purpose = xclearance.purpose
                    };
                using (HttpClient client = new HttpClient())
                {
                    client.BaseAddress = new Uri($"{Nav.BaseUri}");
                    var json = JsonConvert.SerializeObject(_clearance);
                    HttpContent content = new StringContent(json);
                    content.Headers.ContentType = new MediaTypeHeaderValue("application/json");
                    client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",
                    await localStorage.GetItemAsStringAsync("token"));
                    HttpResponseMessage response = await client.PostAsync($"api/clearance/addclearance", content);
                    if (response.IsSuccessStatusCode)
                    {
                        string contentresponse = await response.Content.ReadAsStringAsync();
                        i = JsonConvert.DeserializeObject<int>(contentresponse);
                        if (i > 0)
                        {
                            await InvokeAsync(async () =>
                            {
                                snackBar.Add($"Done: Successfully Saved!", Severity.Success);
                                MudDialog.Cancel();
                                await InvokeAsync(StateHasChanged);
                            });
                        }
                    }
                    else
                    {
                        await InvokeAsync(() =>
                        {
                            snackBar.Add($"Warning: {response.ReasonPhrase}", Severity.Warning);
                            StateHasChanged();
                        });
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
    }
}